

PARSING: ERROR:

cgi cpp
html index 
clean repo 


to not do :

better fonction log






# define BLACK		"\001\033[0;30m\002"
# define RED		"\001\033[0;31m\002"
# define GREEN		"\001\033[0;32m\002"
# define YELLOW		"\001\033[0;33m\002"
# define BLUE		"\001\033[0;34m\002"
# define PURPLE		"\001\033[0;35m\002"
# define CYAN		"\001\033[0;36m\002"
# define GRAY		"\001\033[0;37m\002"
# define END		"\001\033[0m\002"
# define BOLD		"\001\033[1m\002"
# define FAINT		"\001\033[2m\002"
# define ITALIC		"\001\033[3m\002"
# define UNDERLIN	"\001\033[4m\002"
# define BLINK_SLO	"\001\033[5m\002"
# define BLINK_FAS	"\001\033[6m\002"
# define BLINK_OF	"\001\033[25m\002"
# define REV_V		"\001\033[7m\002"
# define CONCEAL	"\001\033[8m\002"
# define CONCEAL_OF	"\001\033[28m\002"
# define CR_OU		"\001\033[9m\002"
# define CR_OUT_OF	"\001\033[29m\002"
# define ERASE		"\001\033[2K\002"
# define RERASE		"\001\r\033[2K\002"
# define CLEAR		"\001\033[2J\002"
# define CURSOR		"\001\033[H\002"
# define SCREEN_RES	"\001\033[?47l\002"




EPOLLERR
error condition on fd 
also reported for write end of pipe when read ened has been closed

EPOLLHUP
hang up (unexpected close of socket) (write closed)
after reading any readable data, reading closed
!close could block until read complte ???!??


EPOLLPRI
excpetionnel condition on fd, see poll2








epoll : 
	init : register server SocketServer fd in EPOLLIN (read)

	each loop: 
		- each revents :
			- check if EPOLLERR ou MARGARINE
			- check if fd is (server_fd <0)	
				-server:	create client (accept client_SocketServer) and ADD client to epoll with EPOLLIN
				-client:
					- IF EPOLLIN -> read request , IF end request -> set to EPOLLOUT + add reay list
					- IF EPOLLOUT -> send request , IF "connection:close" -> EPOLL_DEL client ?
				-cgi: 	add to request 
		
		- procced request, IF CGI -> add pipe to epoll with EPOLLIN


============  LT ===
timeout = -1 (no timeout)

1) wait on epoll 

2) for i in max event :
try 
{

	- check for EPOLERR ou MARGARINE
	- if EVENT IS EPOLLIN :
		- if fd is SockServ -> addclient && add fdclient to EPOLLIN && set clientStatus to accepted 
		- if fd is SockCli -> read MAXBYTES && set CSTATUS to reading
			-if EndOfRequest -> add fd client to EPOLLOUT && set CSTATUS to gathered 
		- if fd is CGI -> ??
	- if EVENT is EPOLLOUT
		- if CSTATUS is PROCEEDED -> sent response
		- if CSTATUS is CGIWAIT -> ??
}
error : 

epollMod	-> FATAL 611
addClient	-> accept -> FATAL  (client isnt added to client list) 605
			-> epollAdd -> FATAL 610
cl->readRequest -> recv -> FATAL 620
				-> request.build	-> ERROR (400, 501, 505)
									-> FATAL (memory, getline, transform, ) 699
cl->sendRequest -> send -> FATAL 621

catch 
{
	
}

3) for i in nclient
	- if CSTATUS is GATHERED -> proceed request
	- if CSTATUS is ERROR -> proceed ERROR request 
	- if CSTATUS is FATAL -> proceed FATAL request 
	- if CSTATUS is CGIWAIT -> ???





============ ET ===
 if no client -> timeout = -1, else timeout = 1ms

1) wait on epoll 

3) for i in nclient
	- if CSTATUS is READING -> read MAXBYTES && chekc EoR with n_read technique
		-if EndOfRequest -> add fd client to EPOLLOUT && set CSTATUS to gathered 
	- if CSTATUS is GATHERED -> proceed request
	- if CSTATUS is ERROR -> proceed ERROR request 
	- if CSTATUS is FATAL -> proceed FATAL request 
	- if CSTATUS is CGIWAIT -> ???

2) for i in max event :
	- check for EPOLERR ou MARGARINE
	- if EVENT IS EPOLLIN :
		- if fd is SockServ -> addclient && add fdclient to EPOLLIN && set clientStatus to accepted 
		- if fd is SockCli -> set CSTATUS to reading
		- if fd is CGI -> ??
	- if EVENT is EPOLLOUT
		- if CSTATUS is PROCEEDED -> sent response
		- if CSTATUS is CGIWAIT -> ??







epoll multi: 
	init : 
		-server SocketServer instance : register server SocketServer fd in EPOLLIN (read)
		-client SocketServer instance : empty
		-cgi instance : empty
		-master instance : register all epoll instace in EPOLLIN
		

	each loop: 
		- each revents :
			- check if EPOLLERR ou MARGARINE
			- check if fd is (server_fd <0)	
				-server:	create client (accept client_SocketServer) and ADD client to epoll with EPOLLIN
				-client:
					- IF EPOLLIN -> read request , IF end request -> set to EPOLLOUT
					- IF EPOLLOUT -> send request , IF "connection:close" -> EPOLL_DEL client ?
				-cgi: 	add to request 
		
		- procced request, IF CGI -> add pipe to epoll with EPOLLIN

	
	|------------|
	|epoll MASTER|
	|------------|

|_> epoll SocketServer  (EPOLLIN)

|_> epoll SocketClient (EPOLLIN & EPOLLOUT)

|_> epoll CGI ?




============  LT ===
timeout = -1 (no timeout)

1) wait on epoll master
- check for EPOLERR ou MARGARINE

2) for i in maxmasterevent 
	- check for EPOLERR ou MARGARINE
	- wait on epoll child (get event)
		- if epoll child == SoscketServer -> addclient && add fdclient to EPOLLIN && set clientStatus to accepted 
		- if epoll child == SocketClient 
			- if EPOLLIN-> read MAXBYTES && set CSTATUS to reading
				-if EndOfRequest -> add fd client to EPOLLOUT && set CSTATUS to gathered 
			- if EPOLLOUT && CSTATUS is PROCEEDED -> sent response
		- if epoll child is CGI -> ??


3) for i in nclient
	- if CSTATUS is GATHERED -> proceed request
	- if CSTATUS is ERROR -> proceed ERROR request 
	- if CSTATUS is FATAL -> proceed FATAL request 
	- if CSTATUS is CGIWAIT -> ???





============ ET ===
 if no client -> timeout = -1, else timeout = 1ms

1) wait on epoll master
- check for EPOLERR ou MARGARINE

2) for i in maxmasterevent 
	- check for EPOLERR ou MARGARINE
	- wait on epoll child (get event)
		- if epoll child == SoscketServer -> addclient && add fdclient to EPOLLIN && set clientStatus to accepted 
		- if epoll child == SocketClient 
			- if EPOLLIN-> set CSTATUS to reading
			- if EPOLLOUT && CSTATUS is PROCEEDED -> sent response
		- if epoll child is CGI -> ??


3) for i in nclient
	- if CSTATUS is READING -> read MAXBYTES && chekc EoR with n_read technique
		-if EndOfRequest -> add fd client to EPOLLOUT && set CSTATUS to gathered 
	- if CSTATUS is GATHERED -> proceed request
	- if CSTATUS is ERROR -> proceed ERROR request 
	- if CSTATUS is FATAL -> proceed FATAL request 
	- if CSTATUS is CGIWAIT -> ???


















OPT :
	use multiple epoll instance : 
	use dup to filter event : ? 
		read and write a t same time ? 





!!! attention overflow SocketServer port (uint16_t) !!

// attention si strtol overflow -> thow
// attention si getline throw

!! debug loulou print que 1 serv !

bien refaire operateur <<




HTTP requests 

METHOD /path/to/request HTTP/1.1

if typo before verssion -> error 400 
if version not support -> error 505
if no host fiel -> error 400 (rfc)
unknow header file -> ignored
unkonw header value -> ignored 
if header field (total size or a simgle field(indicated it in body response)) too large -> 431
if URI too long -> 414
	-error conversion from post to get
	-loop of redirection in URI
	-server under attack

class request :

string 	method 
string	URI
string	http_version
map<string, string> header
string	body

class response:

int 	status_code
string	status
map<string, string> header
string	body



1) typo
2) version 
3) method
4) uri ?

User-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip\r\nAccept: */*\r\nConnection: keep-alive\r\nhost: none\r\nAccept-Language: fr\r\n\r\n 

User-Agent: python-requests/2.22.0
Accept-Encoding: gzip
Accept: */*
Connection: keep-alive
host: none
Accept-Language: fr




The Host request-header field is used to specify the Internet host 
and the port number of the resource being requested