

Client :
	socket pour comminiquer avec 
	Request 
	fd server 
	fd pipe cgi
	request status (not started, in progress, gathered, procced, waiting for cgi, send)



client -> fd   
			fd = "fksjfksjfksjfd"
			read fd = "dsdfsfsfs"
			when close(fd) read fd = "\0"




epoll : 
	init : register server socket fd in EPOLLIN (read)

	each loop: 
		- each revents :
			- check if EPOLLERR ou EPOLLHUP
			- check if fd is (server_fd <0)	
				-server:	create client (accept client_socket) and ADD client to epoll with EPOLLIN
				-client:
					- IF EPOLLIN -> read request , IF end request -> set to EPOLLOUT
					- IF EPOLLOUT -> send request , IF "connection:close" -> EPOLL_DEL client ?
				-cgi: 	add to request 
		
		- procced request, IF CGI -> add pipe to epoll with EPOLLIN



epoll multi: 
	init : 
		-server socket instance : register server socket fd in EPOLLIN (read)
		-client socket instance : empty
		-cgi instance : empty
		-master instance : register all epoll instace in EPOLLIN
		

	each loop: 
		- each revents :
			- check if EPOLLERR ou EPOLLHUP
			- check if fd is (server_fd <0)	
				-server:	create client (accept client_socket) and ADD client to epoll with EPOLLIN
				-client:
					- IF EPOLLIN -> read request , IF end request -> set to EPOLLOUT
					- IF EPOLLOUT -> send request , IF "connection:close" -> EPOLL_DEL client ?
				-cgi: 	add to request 
		
		- procced request, IF CGI -> add pipe to epoll with EPOLLIN


OPT :
	use multiple epoll instance : 
	use dup to filter event : ? 
		read and write a t same time ? 





!!! attention overflow socket port (uint16_t) !!

// attention si strtol overflow -> thow
// attention si getline throw

!! debug loulou print que 1 serv !

bien refaire operateur <<




HTTP requests 

METHOD /path/to/request HTTP/1.1

if typo before verssion -> error 400 
if version not support -> error 505
if no host fiel -> error 400 (rfc)
unknow header file -> ignored
unkonw header value -> ignored 
if header field (total size or a simgle field(indicated it in body response)) too large -> 431
if URI too long -> 414
	-error conversion from post to get
	-loop of redirection in URI
	-server under attack

class request :

string 	method 
string	URI
string	http_version
map<string, string> header
string	body

class response:

int 	status_code
string	status
map<string, string> header
string	body



1) typo
2) version 
3) method
4) uri ?

User-Agent: python-requests/2.22.0\r\nAccept-Encoding: gzip\r\nAccept: */*\r\nConnection: keep-alive\r\nhost: none\r\nAccept-Language: fr\r\n\r\n 

User-Agent: python-requests/2.22.0
Accept-Encoding: gzip
Accept: */*
Connection: keep-alive
host: none
Accept-Language: fr




The Host request-header field is used to specify the Internet host 
and the port number of the resource being requested